// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  RUNNING
  NEEDS_HELP
  NEEDS_REVIEW
  COMPLETED
  CANCELLED
  FAILED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Role {
  USER
  ASSISTANT
}

enum TaskType {
  IMMEDIATE
  SCHEDULED
}

model Task {
  id            String        @id @default(uuid())
  description   String
  type          TaskType      @default(IMMEDIATE)
  status        TaskStatus    @default(PENDING)
  priority      TaskPriority  @default(MEDIUM)
  control       Role          @default(ASSISTANT)
  createdAt     DateTime      @default(now())
  createdBy     Role          @default(USER)
  scheduledFor  DateTime?
  updatedAt     DateTime      @updatedAt
  executedAt    DateTime?
  completedAt   DateTime?
  queuedAt      DateTime?
  error         String?
  result        Json?
  messages      Message[]
  summaries     Summary[]
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?       // Optional foreign key to User for task ownership
}

model Summary {
  id             String     @id @default(uuid())
  content        String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  messages       Message[]  // One-to-many relationship: one Summary has many Messages

  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  
  // Self-referential relationship
  parentSummary  Summary?   @relation("SummaryHierarchy", fields: [parentId], references: [id])
  parentId       String?
  childSummaries Summary[]  @relation("SummaryHierarchy")
}

model Message {
  id        String      @id @default(uuid())
  // Content field follows Anthropic's content blocks structure
  // Example: 
  // [
  //   {"type": "text", "text": "Hello world"},
  //   {"type": "image", "source": {"type": "base64", "media_type": "image/jpeg", "data": "..."}}
  // ]
  content   Json
  role      Role @default(ASSISTANT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  summary   Summary?    @relation(fields: [summaryId], references: [id])
  summaryId String?     // Optional foreign key to Summary
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?     // Optional foreign key to User for message ownership
}

// Better Auth Models
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  sessions      Session[]
  accounts      Account[]
  messages      Message[]
  tasks         Task[]
  
  // Settings relations
  masterUserSettings ApplicationSettings[] @relation("MasterUser")
  
  // Organization relations
  memberships   Member[]
  invitations   Invitation[]
}

model Session {
  id          String    @id @default(uuid())
  userId      String
  token       String    @unique
  expiresAt   DateTime
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                      String    @id @default(uuid())
  userId                  String
  accountId               String
  providerId              String
  accessToken             String?
  refreshToken            String?
  accessTokenExpiresAt    DateTime?
  refreshTokenExpiresAt   DateTime?
  scope                   String?
  idToken                 String?
  password                String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  // Relations
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
}

model Verification {
  id          String    @id @default(uuid())
  identifier  String
  value       String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([identifier, value])
}

// Application Settings Model
model ApplicationSettings {
  id                      String    @id @default(uuid())
  
  // Authentication settings
  emailPasswordEnabled    Boolean   @default(true)
  googleOAuthEnabled      Boolean   @default(false)
  googleClientId          String?
  googleClientSecret      String?
  
  // User registration settings
  signupEnabled           Boolean   @default(true)
  requireInvite           Boolean   @default(false)
  allowedDomains          String[]  // Array of allowed email domains
  
  // General settings
  applicationName         String    @default("Bytebot")
  setupCompleted          Boolean   @default(false)
  masterUserId            String?   // Reference to the first admin user
  
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  // Relations
  masterUser              User?     @relation("MasterUser", fields: [masterUserId], references: [id])
}

// Better Auth Organization Models (for invitation system)
model Organization {
  id            String    @id @default(uuid())
  name          String
  slug          String    @unique
  logo          String?
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  members       Member[]
  invitations   Invitation[]
}

model Member {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           String       @default("member")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
}

model Invitation {
  id             String       @id @default(uuid())
  organizationId String
  email          String
  role           String       @default("member")
  status         String       @default("pending") // pending, accepted, rejected, expired
  expiresAt      DateTime
  inviterId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User         @relation(fields: [inviterId], references: [id])
  
  @@unique([organizationId, email])
}