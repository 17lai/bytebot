[supervisord]
nodaemon=true
logfile=/dev/stdout
logfile_maxbytes=0
loglevel=info
user=root


[program:desktop-vm]
; Run a VM using QEMU in headless mode with VNC on display :0 (TCP port 5900)
; The script checks for HVF (macOS) or KVM (Linux) availability and enables appropriate acceleration
command=sh -c 'if [ "$(uname)" = "Darwin" ] && [ -d "/Library/Apple/System/Library/Frameworks/Hypervisor.framework" ]; then ACCEL="-accel hvf"; elif [ -e /dev/kvm ]; then ACCEL="-accel kvm"; else ACCEL="-accel tcg"; fi; echo "Starting QEMU with VNC on port 5900"; qemu-system-x86_64 -m 8G -smp 4 $ACCEL -device qemu-xhci,id=xhci -device usb-tablet,bus=xhci.0 -drive file=/opt/bytebot-lubuntu-22.04.5.qcow2,format=qcow2 -vnc 0.0.0.0:0 -boot c -qmp unix:/tmp/qmp-sock,server,nowait; echo "QEMU exited with status $?"'
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true

[program:hypervisor]
; Start the hypervisor after waiting for websockify to be ready
command=sh -c 'echo "Waiting for websockify on port 6080 (hypervisor)..."; while ! nc -z localhost 6080; do sleep 2; done; echo "Websockify is ready, starting hypervisor"; exec node /hypervisor/dist/main.js'
directory=/hypervisor
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true

[program:novnc-http]
; Serve the noVNC client files using Python's HTTP server on port 6081.
; Wait for websockify to be ready on port 6080
command=sh -c 'echo "Waiting for websockify on port 6080 (noVNC)..."; while ! nc -z localhost 6080; do sleep 2; done; echo "Websockify is ready, starting noVNC HTTP server on port 6081"; exec python3 -m http.server 6081 --directory /opt/noVNC'
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true

[program:websockify]
; Run websockify to proxy VNC traffic from WebSocket to TCP
command=sh -c 'echo "Starting websockify to proxy from port 6080 to VNC port 5900"; sleep 5; websockify 6080 localhost:5900'
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true
